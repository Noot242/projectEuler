/*
Even Fibonacci numbers

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

#include"Q2.h"
#include<iterator>
#include<vector>

// Returns the nth term fibonacci number (assuming first term is 1, second is 2, etc.)
int fibonacci(int n)
{
	// Static vector to store results from Fibonacci rather than recalculate each iteration
	static std::vector<int> myFibSequence{ 0, 1, 2 };
	int nextFibTerm{};

	if (n < static_cast<int>(myFibSequence.size())) {
		return static_cast<int>(myFibSequence[n]);
	}
	else {
		nextFibTerm = (fibonacci(n - 1) + fibonacci(n - 2));
		myFibSequence.push_back(nextFibTerm);
		return nextFibTerm;
	}
}

int Q2(int seqLimit)
{
	int i{ 2 }; // Every 2nd, 5th, 8th, ..., 2 + 3*i th fibonacci term is even
	int sum{};

	while (fibonacci(i) < seqLimit) {
		sum += fibonacci(i);
		i += 3; // Every third term is an even fibonacci terms if starting from 2nd term
	}
	return sum;
}

/* Notes

	Find fib up to 4, 000, 000;

	Only take even terms;

	Sum;

	Odd + Even = Odd;
	Odd + Odd = Even;
	Even + Odd = Odd;
	Even + Even = Even;

	Therefore the 2nd, 5th, 8th, 11th, ... terms are even (n = 2 + 3*i - where i = 0, 1, 2, ...)

	Can be solved recursively

	Should save each value in an array/vector so I don't have to keep recalculating

*/